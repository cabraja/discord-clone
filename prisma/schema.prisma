generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String    @db.Text
  email     String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  servers   Server[]
  members   Member[]
  channels  Channel[]
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String    @db.Text
  inviteCode String    @unique
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  members    Member[]
  channels   Channel[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String

  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  messages               Message[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
  directMessages         DirectMessage[]

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  @@index([serverId])
  @@index([profileId])
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id          String @id @default(uuid())
  memberOneId String
  MemberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId    String
  MemberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
